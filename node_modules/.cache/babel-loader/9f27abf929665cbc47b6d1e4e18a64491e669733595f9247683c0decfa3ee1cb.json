{"ast":null,"code":"var _jsxFileName = \"/Users/neeleshsharma/Desktop/project2/src/App.js\";\nimport React from 'react';\nimport './App.css';\nconst provider = new GoogleAuthProvider();\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst auth = getAuth();\nsignInWithPopup(auth, provider).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken;\n  // The signed-in user info.\n  const user = result.user;\n  // IdP data available using getAdditionalUserInfo(result)\n  // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message;\n  // The email of the user's account used.\n  const email = error.customData.email;\n  // The AuthCredential type that was used.\n  const credential = GoogleAuthProvider.credentialFromError(error);\n  // ...\n});\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"Hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","provider","GoogleAuthProvider","getAuth","signInWithPopup","jsxDEV","_jsxDEV","auth","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/neeleshsharma/Desktop/project2/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst provider = new GoogleAuthProvider();\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nconst auth = getAuth();\nsignInWithPopup(auth, provider)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // IdP data available using getAdditionalUserInfo(result)\n    // ...\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Hi\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAElB,MAAMC,QAAQ,GAAG,IAAIC,kBAAkB,EAAE;AAEzC,SAASC,OAAO,EAAEC,eAAe,EAAEF,kBAAkB,QAAQ,eAAe;AAAC,SAAAG,MAAA,IAAAC,OAAA;AAE7E,MAAMC,IAAI,GAAGJ,OAAO,EAAE;AACtBC,eAAe,CAACG,IAAI,EAAEN,QAAQ,CAAC,CAC5BO,IAAI,CAAEC,MAAM,IAAK;EAChB;EACA,MAAMC,UAAU,GAAGR,kBAAkB,CAACS,oBAAoB,CAACF,MAAM,CAAC;EAClE,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAW;EACpC;EACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI;EACxB;EACA;AACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;EAClB;EACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;EAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;EAClC;EACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAU,CAACD,KAAK;EACpC;EACA,MAAMX,UAAU,GAAGR,kBAAkB,CAACqB,mBAAmB,CAACP,KAAK,CAAC;EAChE;AACF,CAAC,CAAC;;AAEJ,SAASQ,GAAGA,CAAA,EAAG;EACb,oBACElB,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,EAAC;EAErB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAM;AAEV;AAACC,EAAA,GANQP,GAAG;AAQZ,eAAeA,GAAG;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}