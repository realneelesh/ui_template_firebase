{"ast":null,"code":"var _jsxFileName = \"/Users/neeleshsharma/Desktop/project2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { getAuth, signInWithRedirect, GoogleAuthProvider, getRedirectResult, signOut } from \"firebase/auth\";\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDR7-s410uPNtSYw4zVva97SRcjLrALeNw\",\n  authDomain: \"project-2-4dae9.firebaseapp.com\",\n  projectId: \"project-2-4dae9\",\n  storageBucket: \"project-2-4dae9.appspot.com\",\n  messagingSenderId: \"839909928632\",\n  appId: \"1:839909928632:web:9a29480b819af837e10e4d\",\n  measurementId: \"G-1V9C17PCRK\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst provider = new GoogleAuthProvider();\nconst auth = getAuth(app);\nfunction App() {\n  _s();\n  useEffect(() => {\n    getRedirectResult(auth).then(result => {\n      // This gives you a Google Access Token. You can use it to access Google APIs.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n\n      // The signed-in user info.\n      const user = result.user;\n      console.log(user);\n      // IdP data available using getAdditionalUserInfo(result)\n      // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.customData.email;\n      // The AuthCredential type that was used.\n      const credential = GoogleAuthProvider.credentialFromError(error);\n      signInWithRedirect(auth, provider);\n\n      // ...\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        signOut(auth).then(() => {\n          // Sign-out successful.\n        }).catch(error => {\n          // An error happened.\n        });\n      },\n      children: \"out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","getAuth","signInWithRedirect","GoogleAuthProvider","getRedirectResult","signOut","initializeApp","getAnalytics","jsxDEV","_jsxDEV","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","provider","auth","App","_s","then","result","credential","credentialFromResult","token","accessToken","user","console","log","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/neeleshsharma/Desktop/project2/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { getAuth, signInWithRedirect, GoogleAuthProvider, getRedirectResult, signOut } from \"firebase/auth\";\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDR7-s410uPNtSYw4zVva97SRcjLrALeNw\",\n  authDomain: \"project-2-4dae9.firebaseapp.com\",\n  projectId: \"project-2-4dae9\",\n  storageBucket: \"project-2-4dae9.appspot.com\",\n  messagingSenderId: \"839909928632\",\n  appId: \"1:839909928632:web:9a29480b819af837e10e4d\",\n  measurementId: \"G-1V9C17PCRK\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nconst provider = new GoogleAuthProvider();\n\nconst auth = getAuth(app);\n\nfunction App() {\n\n  useEffect(()=>{\n   getRedirectResult(auth)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access Google APIs.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n\n    // The signed-in user info.\n    const user = result.user;\n    console.log(user);\n    // IdP data available using getAdditionalUserInfo(result)\n    // ...\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    signInWithRedirect(auth, provider);\n\n    // ...\n  });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={()=>{\n        signOut(auth).then(() => {\n          // Sign-out successful.\n        }).catch((error) => {\n          // An error happened.\n        });\n      }}>out</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,OAAO,QAAQ,eAAe;;AAE3G;AACA,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,QAAQ,oBAAoB;AACjD;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,iCAAiC;EAC7CC,SAAS,EAAE,iBAAiB;EAC5BC,aAAa,EAAE,6BAA6B;EAC5CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGZ,aAAa,CAACI,cAAc,CAAC;AACzC,MAAMS,SAAS,GAAGZ,YAAY,CAACW,GAAG,CAAC;AAEnC,MAAME,QAAQ,GAAG,IAAIjB,kBAAkB,EAAE;AAEzC,MAAMkB,IAAI,GAAGpB,OAAO,CAACiB,GAAG,CAAC;AAEzB,SAASI,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEbvB,SAAS,CAAC,MAAI;IACbI,iBAAiB,CAACiB,IAAI,CAAC,CACvBG,IAAI,CAAEC,MAAM,IAAK;MAChB;MACA,MAAMC,UAAU,GAAGvB,kBAAkB,CAACwB,oBAAoB,CAACF,MAAM,CAAC;MAClE,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAW;;MAEpC;MACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI;MACxBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB;MACA;IACF,CAAC,CAAC,CAACG,KAAK,CAAEC,KAAK,IAAK;MAClB;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;MAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;MAClC;MACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAU,CAACD,KAAK;MACpC;MACA,MAAMb,UAAU,GAAGvB,kBAAkB,CAACsC,mBAAmB,CAACP,KAAK,CAAC;MAChEhC,kBAAkB,CAACmB,IAAI,EAAED,QAAQ,CAAC;;MAElC;IACF,CAAC,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAKiC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBlC,OAAA;MAAQmC,OAAO,EAAEA,CAAA,KAAI;QACnBvC,OAAO,CAACgB,IAAI,CAAC,CAACG,IAAI,CAAC,MAAM;UACvB;QAAA,CACD,CAAC,CAACS,KAAK,CAAEC,KAAK,IAAK;UAClB;QAAA,CACD,CAAC;MACJ,CAAE;MAAAS,QAAA,EAAC;IAAG;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAS;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACX;AAEV;AAACzB,EAAA,CAvCQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}